// Generated by CoffeeScript 1.12.3
(function() {
  var R, _Contain, child, createElement, dynamic, ensureNotIn, index,
    slice = [].slice;

  createElement = require('react').createElement;

  ensureNotIn = function(field, obj, msg) {
    var error;
    if (field in obj) {
      error = new Error(msg + ". Found " + field + " in route");
      error.framesToPop = 1;
      throw error;
    }
  };

  R = function() {
    var component, i, len, path, route, transformer, transformers;
    path = arguments[0], component = arguments[1], transformers = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    route = {
      path: path,
      component: component
    };
    for (i = 0, len = transformers.length; i < len; i++) {
      transformer = transformers[i];
      route = transformer(route);
    }
    return route;
  };

  child = function(childRoute) {
    return function(route) {
      if (!Array.isArray(route.childRoutes)) {
        route.childRoutes = [];
      }
      route.childRoutes.push(childRoute);
      return route;
    };
  };

  index = function(component) {
    return function(route) {
      ensureNotIn('indexRoute', route, 'index can only be used once');
      route.indexRoute = {
        component: component
      };
      return route;
    };
  };

  _Contain = function(parent, child) {
    return function(props) {
      return createElement(parent, {}, createElement(child, {}));
    };
  };

  dynamic = function(arg) {
    var component, getRoute, path;
    path = arg.path, component = arg.component, getRoute = arg.getRoute;
    return function(route) {
      var childRoute;
      if (getRoute == null) {
        throw new Error('getRoute not provided');
      }
      childRoute = {};
      if (path != null) {
        childRoute.path = path;
      }
      if (component != null) {
        childRoute.component = component;
      }
      childRoute.getIndexRoute = function(_partialNextState, callback) {
        return getRoute(function(route) {
          if (route.indexRoute != null) {
            if (route.component != null) {
              return callback(void 0, {
                component: _Contain(route.component, route.indexRoute.component)
              });
            } else {
              return callback(void 0, {
                component: route.indexRoute.component
              });
            }
          } else {
            if (route.component != null) {
              return callback(void 0, {
                component: route.component
              });
            } else {
              return callback(void 0, {
                component: null
              });
            }
          }
        });
      };
      childRoute.getChildRoutes = function(_partialNextState, callback) {
        return getRoute(function(route) {
          return callback(void 0, [route]);
        });
      };
      return child(childRoute)(route);
    };
  };

  module.exports = {
    R: R,
    child: child,
    dynamic: dynamic,
    index: index
  };

}).call(this);
